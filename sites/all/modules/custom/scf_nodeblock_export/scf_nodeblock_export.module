<?php

define('SCF_NODEBLOCK_EXPORT_FIELD', 'scf_f_machine_name');

/**
 * Implements hook_block_info().
 */
function scf_nodeblock_export_block_info() {
  $blocks = array();

  // Checks that the expected machine name field exists.
  if (!field_read_fields(array('field_name' => SCF_NODEBLOCK_EXPORT_FIELD), array('include_inactive' => TRUE))) {
    return array();
  }

  // Loads all nodeblocks which have a value for the machine name field.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'nodeblock')
    ->propertyCondition('status', 1)
    ->fieldCondition(SCF_NODEBLOCK_EXPORT_FIELD, 'machine', '', '!=');

  $result = $query->execute();
  if (!empty($result['node'])) {
    foreach ($result['node'] as $nid => $item) {
      $node = node_load($nid);
      if (!empty($node) && !empty($node->{SCF_NODEBLOCK_EXPORT_FIELD}[LANGUAGE_NONE][0]['machine'])) {
        $machine_name = $node->{SCF_NODEBLOCK_EXPORT_FIELD}[LANGUAGE_NONE][0]['machine'];
        $blocks[$machine_name] = array(
         'info' => $machine_name . ' (nodeblock)',
        );
      };
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function scf_nodeblock_export_block_view($delta = '') {
  $block = array();

  // Look for the block identified by the machine name.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'nodeblock')
    ->propertyCondition('status', 1)
    ->fieldCondition(SCF_NODEBLOCK_EXPORT_FIELD, 'machine', $delta, '=');

  $result = $query->execute();
  if (!empty($result['node'])) {
    foreach ($result['node'] as $nid => $item) {
      $node = node_load($nid);
    }
  }

  // The rest below is taken from nodeblock.module.
  if (!node_access('view', $node)) {
    return;
  }
  $settings = nodeblock_block_variable_get_values($delta, $node->type);
  $lang = LANGUAGE_NONE;
  // if the node type is translatable, try to load the node with the appropriate
  // language from the translation set.
  if (module_exists('translation') && translation_supported_type($node->type)) {
    global $language;
    $translations = translation_node_get_translations($node->tnid);
    $lang = $language->language;
    $nodeblock_translation_fallback = variable_get('nodeblock_translation_fallback_'.$node->nid, '0');

    if (!empty($translations[$language->language])) {
      $node = node_load($translations[$language->language]->nid);
    }
    else if($node->language == $language->language){

    }
    elseif (!$nodeblock_translation_fallback && isset($node->language) && $node->language != 'und' ) {
      // if no translation was found, and not using the fallback option
      // return nothing, so the block doesn't display.
      return;
    }
    // otherwise we just use the main node
  }

  // Set a flag so that themes have more context.
  $node->nodeblock = TRUE;

  $block['subject'] = check_plain($node->title);

  $block['content'] =  node_view($node, $settings['view_mode'], $lang);

  if(!(bool)$settings['node_link'] && isset($block['content']['links']['node'])) {
    unset($block['content']['links']['node']);
  }
  if(!(bool)$settings['comment_link'] && isset($block['content']['links']['comment'])) {
    unset($block['content']['links']['comment']);
  }
  return $block;
}
